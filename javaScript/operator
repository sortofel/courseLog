/**연산자의 위치 */
let result = 1;
console.log(result);

result = number ++ ;
console.log(result, number); //1 2; ++전에 다른 operator가 먼저 실행됨; result=number 에서 끝남.

result = number --;
console.log(result, number); //2 1; 이 전에 number가 2였고, number 는 따로 -- 를 받음.

result = ++ number ;
console.log(result, number);//2 2; ++가 앞에 있으니까 값을 먼저 저장함.

result = -- number ;
console.log(result, number);

//String에 +, - 등 operator 붙이면 number가 될 수 있음. true=1, false=0

//assignment operator (할당 연산자)
number += 10;
console.log(number); //110 (=) 할당 연산자, 계산 후 변수에 저장해줌 (+=, -=, *=, /=, %=)

number -= 10;
console.log(number); //100

//비교 연산자; ==, ===, !=, !=== 값의 비교(==, !=), 타입의 비교(===, !==)
console.log(5 == '5'); //true

console.log(5 === '5'); //false

console.log(true !== '1'); //true, they have a diffirent type!

// 대소 관계 비교 연산자
console.log(100 > 1); //true
console.log(100 < 1); //false
console.log(100 <= 1); //false
console.log(100 >= 1); //true

//삼항 조건 연산자 (ternary operator); 질문? true:false
console.log(10 > 0 ? '10이 0보다 크다' : '10이 0보다 작다'); //10이 0보다 크다

/** 논리 연산자
 * 
 * 1) && ;and
 * 2) || ;or
 */

console.log(true && true); //true
console.log(true && false); //false

console.log(10 < 1 || 20 > 2); //true
console.log(10 < 1 || 20 < 2); //false

//short circuit evaluation
console.log(true && true && 'blur'); //blur; true && true(1), true && 'blur'(2) 계산 두 번
console.log(false && true && 'blur'); //false
console.log(false || true && 'blur'); //blur

//지수 연산자
console.log(2 ** 2); //2^2 = 4
console.log(10 ** 3); //1000

//null 연산자
let name;
console.log(name); //undefined

name = name ?? 'damon'; //??; 좌측 값이 undefined or null 이면 우측값 반환
console.log(name); //damon

name = name ?? 'blur';
console.log(name); //damon, 위에서 name에 damon이 저장됨->undefined or null이 아님.

let name2;
name2 ??= 'damon';
console.log(name2); //damon ??=에서 똑같은 작용을 함

